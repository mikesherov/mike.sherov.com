{"componentChunkName":"component---src-pages-lessons-js","path":"/lessons/","webpackCompilationHash":"99ef926341ac5826e707","result":{"data":{"site":{"siteMetadata":{"title":"Mike Sherov"}},"allEggheadlessons":{"edges":[{"node":{"title":"Map and Flatten Multidimensional Arrays with ES2019 Array.prototype.flatMap","alternative_id":4619,"state":"published","http_url":"https://egghead.io/lessons/javascript-map-and-flatten-multidimensional-arrays-with-es2019-array-prototype-flatmap","summary":"ES2019 introduces the Array.prototype.flatMap method. In this lesson, we'll map and flatten a multidimensional array using Array.prototype.map, Array.prototype.reduce and Array.prototype.concat, and then refactor the code to do the same thing using the .flatMap method. Then, we'll see how we can use empty arrays in our map function to act as a filter before mapping. ","duration":144,"tags":[{"label":"JavaScript"}]}},{"node":{"title":"Use ES2019 Array.prototype.flat to Flatten Multidimensional Arrays","alternative_id":4601,"state":"published","http_url":"https://egghead.io/lessons/javascript-use-es2019-array-prototype-flat-to-flatten-multidimensional-arrays","summary":"ES2019 introduces the Array.prototype.flat method. In this lesson, we'll flatten a multidimensional array using Array.prototype.reduce and Array.prototype.concat, and then refactor the code to do the same thing using the .flat method. We'll then use the depth parameter to flatten a 3 dimensional array.","duration":77,"tags":[{"label":"JavaScript"}]}},{"node":{"title":"Track First Contentful Paint with PerformanceObserver and Google Analytics","alternative_id":4532,"state":"published","http_url":"https://egghead.io/lessons/html-5-track-first-contentful-paint-with-performanceobserver-and-google-analytics","summary":"\"If you can't measure it, you can't improve it.\" The first step when doing performance work is to measure meaningful metrics to establish a baseline for improvement. In this lesson, we'll measure Time to First Contentful Paint, a user-centric performance metric. We'll first create a PerformanceObserver object and explore the information it captures. Next, we'll send that information to Google Analytics to track FCP over time. Lastly, we'll discover why PerformanceObserver is one of the few bits of Javascript that rightly belong in the head of your document.","duration":162,"tags":[{"label":"HTML 5"},{"label":"JavaScript"}]}},{"node":{"title":"Delete Unused Code with Webpack and unused-files-webpack-plugin","alternative_id":4558,"state":"published","http_url":"https://egghead.io/lessons/webpack-delete-unused-code-with-webpack-and-unused-files-webpack-plugin","summary":"As you refactor and modify applications, it's difficult to manage and keep track of files as they become unused. Keeping this \"dead\" code around adds noise to your application and reduces clarity. Just as ESLint can tell us when variables become unused, Webpack (with the help of the unused-files-webpack-plugin) can tell us when entire files become unused. First, we'll install the plugin with npm and save it as a devDependency. Next, we'll use npm run scripts to build a new command that will run Webpack with the plugin. Finally, we'll learn how to use Webpack environment variables to conditionally add plugins to your Webpack config. By the end of the lesson, you'll have a useful cli command you can run to check for unused modules in your Webpack build","duration":199,"tags":[{"label":"webpack"}]}},{"node":{"title":"Explore ES2019 stable array sorting by example","alternative_id":4635,"state":"published","http_url":"https://egghead.io/lessons/javascript-explore-es2019-stable-array-sorting-by-example","summary":"Before ES2019, array sorting in Javascript was not guaranteed to be stable. In this lesson, we'll learn what stable sorting is by seeing an example of unstable sorting. We'll use nvm to switch between an older version of Node and a newer version and compare how each version deals with sorting. Lastly, we'll mimic stable sorting by adding indexes to our array elements and comparing the indexes during sort.\n\nYou can find installation instructions for nvm here: https://github.com/creationix/nvm\nStable sorting was adding to v8 v7.0 (Chrome 70 and Node 11), as noted here: https://v8.dev/blog/array-sort\n\n","duration":117,"tags":[{"label":"JavaScript"}]}},{"node":{"title":"Refactor es5 functions to es6 arrow functions","alternative_id":4311,"state":"published","http_url":"https://egghead.io/lessons/javascript-refactor-es5-functions-to-es6-arrow-functions","summary":"In this lesson we'll learn how to refactor es5 functions into es6 arrow functions to decrease visual noise in our program. We'll take a step by step approach, increasing clarity with each rewrite.","duration":97,"tags":[{"label":"JavaScript"}]}},{"node":{"title":"Lazyload below the fold images and iframes with native browser lazy-loading","alternative_id":4997,"state":"published","http_url":"https://egghead.io/lessons/html-5-lazyload-below-the-fold-images-and-iframes-with-native-browser-lazy-loading","summary":"In this lesson, you'll learn how to use the `loading=\"lazy\"` attribute available on images and iframes to lazily load below the fold images, which saves bandwidth and increases the load time performance of web pages. You'll also learn how to prevent images from lazy loading if necessary, and how to add lazy loading to responsive images as well. Lazy loading is supported in Chrome 76, and will be available in the next version of Edge and has public signals of support from Firefox, and Safari as well.","duration":179,"tags":[{"label":"HTML 5"}]}},{"node":{"title":"Use ES6 Sets to Improve Javascript Performance","alternative_id":4507,"state":"published","http_url":"https://egghead.io/lessons/javascript-use-es6-sets-to-improve-javascript-performance","summary":"Using Sets in ES6 to produce lists of unique objects is faster than using arrays, and less error prone than using objects. In this lesson, we explore the pitfalls of the object approach and the speed implications of the array approach. We will then instrument the array approach and the set approach to measure the number of operations each approach performs, and it's implications on program speed.","duration":214,"tags":[{"label":"JavaScript"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}