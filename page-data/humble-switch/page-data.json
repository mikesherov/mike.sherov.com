{"componentChunkName":"component---src-templates-blog-post-js","path":"/humble-switch/","webpackCompilationHash":"99ef926341ac5826e707","result":{"data":{"site":{"siteMetadata":{"title":"Mike Sherov","author":"Mike Sherov"}},"markdownRemark":{"id":"35fe52e5-2bf1-5c5e-9340-d206beb93d9c","excerpt":"The switch statement has long been a staple in popular programming languages. It’s typically used to execute branching logic by comparing a value against…","html":"<p>The switch statement has long been a staple in popular programming languages. It’s typically used to execute branching logic by comparing a value against multiple cases, and has at least one way of introducing subtle bugs: fallthrough. In this article, we’ll dive into the inner workings of this seemingly “simple” bit of syntax in javascript, discover how it works, and find use cases for it’s sharp edges. Keep in mind that this is all “toy code”, and may not be suitable for use in your codebases considering the relative obscurity of these edges.</p>\n<h2>Syntax Definitions</h2>\n<p>We’ll be using precise terms for each bit of syntax, so let’s start with some definitions. Consider the following code, and use the table below to map the syntax to it’s name:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Term</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>switch { … }</td>\n<td>SwitchStatement</td>\n</tr>\n<tr>\n<td>‘a’</td>\n<td>discriminant</td>\n</tr>\n<tr>\n<td>case ‘b’</td>\n<td>SwitchCase</td>\n</tr>\n<tr>\n<td>‘b’</td>\n<td>test</td>\n</tr>\n<tr>\n<td>log(‘c’)</td>\n<td>consequent</td>\n</tr>\n<tr>\n<td>default</td>\n<td>SwitchDefault</td>\n</tr>\n<tr>\n<td>log(‘d’)</td>\n<td>consequent</td>\n</tr>\n</tbody>\n</table>\n<h2>Evaluating Cases and the “Inverted Switch”</h2>\n<p>In most typical cases, SwitchStatement is used to compared a computed discriminant against multiple literal SwitchCase tests, either integers or strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animalType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>animalType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"woof\"</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"meow\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this snippet above, both <code class=\"language-text\">&quot;dog&quot;</code> and <code class=\"language-text\">&quot;cat&quot;</code> are string literals, but that doesn’t have to be the case. The JS spec says that SwitchCase tests can be any expression, even function calls. Let’s rewrite our SwitchStatement to use function calls:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDogType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"dog\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCatType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"cat\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animalType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>animalType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getDogType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"woof\"</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getCatType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"meow\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Seeing that we can run functions in our SwitchCase tests, we can now invert the purpose of the SwitchStatement. That is, instead of comparing a variable against a set of literals, we can compare a literal, e.g. <code class=\"language-text\">true</code>, against a set of function calls. Consider the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">logValue<span class=\"token punctuation\">,</span> returnValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logValue<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> returnValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 2\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 3\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// case 1</span>\n<span class=\"token comment\">// case 2</span>\n<span class=\"token comment\">// body 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that <code class=\"language-text\">case 3</code> is not in the output, because SwitchCase tests are executed in order <strong>only until one strictly equals the discriminant</strong> (a.k.a. <strong>“short circuiting”</strong>), and then the corresponding SwitchCase consequent is executed. Any subsequent SwitchCase tests are not executed. This allowed us to “invert” the purpose of the switch! That is, we can compare a literal against a set of functions until one matches. A real world use case for such code might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">accessControlStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">,</span> request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">isForbidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">403</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">isLoggedIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">401</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">200</span>\n  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note that because order matters, a forbidden AND unauthorized request will display the forbidden error code. Also notice that there is a “fallthrough” from line 5 to line 6 which means that <code class=\"language-text\">401</code> is returned in either case… but maybe we’re left wondering if <code class=\"language-text\">!user.isAuthorized(request):</code> is called when <code class=\"language-text\">case !user.isLoggedIn():</code> is already true. That is, we’re wondering if <code class=\"language-text\">case !user.isLoggedIn(request):</code> still “short circuits”. Let’s find out:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">logValue<span class=\"token punctuation\">,</span> returnValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> returnValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 2a\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 2b\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 2\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// no break here</span>\n  <span class=\"token keyword\">case</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body 3\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// case 1</span>\n<span class=\"token comment\">// case 2a</span>\n<span class=\"token comment\">// body 2</span>\n<span class=\"token comment\">// body 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Our rule still holds! SwitchCase tests are only executed until one strictly equals the discriminant, even if there is another SwitchCase directly underneath. Also note that we have introduced a “fallthrough” by not breaking after <code class=\"language-text\">body 2</code>, so that <code class=\"language-text\">body 3</code> is executed! We can conclude the following rule about switch: <strong>switch will execute every SwitchCase test until one strictly equals the discriminant, and then will execute every following consequent, in order, until it encounters a statement like <code class=\"language-text\">break</code>, <code class=\"language-text\">return</code>, or <code class=\"language-text\">continue</code>.</strong> This rule makes for very interesting patterns when used intentionally, as you’re about to see.</p>\n<h2>Fallthrough</h2>\n<p>Several of the examples we’ve seen so far contain fallthroughs. At first glance, fallthrough just looks like one giant bug waiting to happen. With fallthrough, consequents that don’t end in a control flow statement like <code class=\"language-text\">break</code> will then execute the next consequent, which is often a bug:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sound\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">:</span>\n      sound <span class=\"token operator\">=</span> <span class=\"token string\">\"woof\"</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">:</span>\n      sound <span class=\"token operator\">=</span> <span class=\"token string\">\"meow\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> sound\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Oops, now <code class=\"language-text\">speak(&#39;dog&#39;) === &#39;meow&#39;</code>! This type of bug is so common that most linters include a rule for switch statements that forbids fallthrough unless a comment <code class=\"language-text\">// falls through</code> is added calling it out as intentional. If it’s so error-prone, why does switch even have fallthrough? We can say for sure that sequential SwitchCase’s (i.e. back-to-back SwitchCases with no consequent separating them) is a useful form of fallthrough, as we saw in our accessControl example, but are there legitimate uses cases for fallthrough after a consequent? The answer lies in the rule we discovered, which we can leverage to <strong>enter a set of transformations of data at any point.</strong> Consider, for example, a time scale conversion function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> term</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"years\"</span><span class=\"token punctuation\">:</span>\n      value <span class=\"token operator\">*=</span> <span class=\"token number\">365</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">:</span>\n      value <span class=\"token operator\">*=</span> <span class=\"token number\">24</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">:</span>\n      value <span class=\"token operator\">*=</span> <span class=\"token number\">60</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">:</span>\n      value <span class=\"token operator\">*=</span> <span class=\"token number\">60</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 60</span>\n<span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hours\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3600</span>\n<span class=\"token function\">toSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 86400</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This example reveals the true nature of the humble switch statement. In many ways, it resembles a <code class=\"language-text\">goto</code> statement in it’s ability to allow you to jump to a specific “label” in a set of statements. <code class=\"language-text\">goto</code> has long fallen out of favor in moden programming languages, and maybe that’s a hint that this form of switch statement should remain in obscurity as well. It can be rewritten with a set of if statements or loops, and perhaps that’s better because less folks are exposed to purposeful fallthrough today.</p>\n<h2>Conclusion</h2>\n<p>Digging into basic language features is a good way to level up. As you saw, the switch statement is full of surprises. Features like fallthrough, short circuiting, and “inversion” make this statement powerful, but hazardous. Knowing of them will make you a better debugger, but exercising restraint in using them will ensure your code is more understandable and accessible to every member of your team.</p>","fields":{"readingTime":{"text":"6 min read"}},"frontmatter":{"date":"September 25, 2019","title":"The Humble Switch Statement","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/humble-switch/","previous":{"fields":{"slug":"/ie11-countdown/"}},"next":{"fields":{"slug":"/man-in-the-middle/"}}}}}